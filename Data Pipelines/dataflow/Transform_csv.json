{
	"name": "Transform_csv",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dataflow_source",
						"type": "DatasetReference"
					},
					"name": "sourceCSV"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dataflow_sink",
						"type": "DatasetReference"
					},
					"name": "sink"
				}
			],
			"transformations": [
				{
					"name": "selectCols"
				},
				{
					"name": "filter1"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          transaction_id as string,",
				"          transactional_date as timestamp,",
				"          product_id as string,",
				"          customer_id as short,",
				"          payment as string,",
				"          credit_card as long,",
				"          loyalty_card as boolean,",
				"          cost as double,",
				"          quantity as short,",
				"          price as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceCSV",
				"sourceCSV select(mapColumn(",
				"          transaction_id,",
				"          transactional_date,",
				"          product_id,",
				"          customer_id,",
				"          payment,",
				"          price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCols",
				"selectCols filter(customer_id != 12) ~> filter1",
				"filter1 split(payment == 'visa',",
				"     payment == 'mastercard',",
				"     disjoint: false) ~> split1@(visa, mastercard, amex)",
				"split1@amex derive(payment = coalesce(payment,'N/A')) ~> derivedColumn",
				"split1@visa aggregate(product_id = max(product_id)) ~> aggregate1",
				"aggregate1 alterRow(insertIf(1==1)) ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink"
			]
		}
	}
}